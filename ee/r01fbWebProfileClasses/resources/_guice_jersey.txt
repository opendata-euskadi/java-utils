JERSEY - GUICE
=========================================================================================

/WEB-INF/web.xml
------------------------
	1.- Set-up the GUICE filter:
			<filter>
		    	<filter-name>guiceFilter</filter-name>
		    	<filter-class>com.google.inject.servlet.GuiceFilter</filter-class>
		  	</filter>
		  	<filter-mapping>
		   		<filter-name>guiceFilter</filter-name>
		    	<url-pattern>/*</url-pattern>
		  	</filter-mapping>
	2.- Set-up a listener for the application context events
			<listener>
		 		<listener-class>foo.rest.FooRESTGuiceServletContextListener</listener-class>
		 	</listener>

		 	
		The type foo.rest.FooRESTGuiceServletContextListener extends GuiceServletContextListener 
		and is in charge of two things:
			a.- Initialize the GUICE inyector in charge of creating the REST resources
			b.- Close in an ordered way the Lucene index when the application context is destroyed
			
	With this config the base URL for the REST services will be:
	http://localhost:8080/fooRESTServicesWar/
	
Dependency injection
-------------------------
	IMPORTANT!!		Using GUICE it's VERY important to ensure that ONLY an injector exists
					So normally an injector "holder" is used BUT ONLY while setting up the application
						- The R01MInjector "holds" the guice injector (it's a singleton) 
						- R01M.getGuiceInjector() is used to access the guice injector
					DO NOT USE R01M.getGuiceInjector() outside the the application bootstraping!
	
	1.- GUICE loads the injector at the web context listener (FooRESTGuiceServletContextListener)
	
		public class FooRESTGuiceServletContextListener 
			 extends GuiceServletContextListener {
				@Override
				protected Injector getInjector() {
					return R01M.getGuiceInjector();
				}
				...
		}	
	2.- GUICE are installed when creating the injector: see the injector holder (R01MInjector singleton)
			private enum InjectorSingleton {
				INJECTOR;
		
				private final Injector _injector;
				private InjectorSingleton() {
					_injector = Guice.createInjector(new R01FBootstrapGuiceModule(),		// R01F
													 new FooRESTGuiceJerseyServletModule(),	// GUICE Servlet Modules for Jersey
													 new FooGuiceBootstrapModule(),			// Foo modules
													 ...);
				}
			    public Injector injector() {
			    	return _injector;
			    }
			}
		
		It's very important that a module extending JerseyServletModule is being installed because there is where the
		Jersey application it's configured (FooRESTGuiceJerseyServletModule)
		The "javax.ws.rs.Application" param sets the REST application type (a class extending javax.ws.rs.Application):
			IMPORTANT:
				If "javax.ws.rs.Application" param is NOT define GUICE tries to instanciate the REST resource types
				defined at the injector (the types annotated with @Path defined at the injector)
			
			public class FooRESTGuiceServletContextListener 
			     extends JerseyServletModule {
					@Override
					protected void configureServlets() {				 
						// Route all requests through GuiceContainer
						Map<String,String> params = new HashMap<String,String>();
						params.put("javax.ws.rs.Application",FooRESTApp.class.getName());
						serve("/*").with(GuiceContainer.class,params);
					}
			}			

	
jersey Application: foo.rest.FooRESTApp
----------------------------------------
	@Singleton
	@NoArgsConstructor
	public class FooRESTApp 
	     extends Application {
	     
		@Override
		public Set<Class<?>> getClasses() {
			Set<Class<?>> s = new HashSet<Class<?>>();
			
			// rest resources 
			s.add(FooRESTResourceForXXX.class);
			s.add(FooRESTResourceForYYY.class);
			s.add(FooRESTResourceForZZZ.class);
			
			// Common response type mappers
			s.add(BooleanResponseTypeMapper.class);
			s.add(LongResponseTypeMapper.class);
			
			// Response type mappers: transforms Java->XML for the types returned by REST methods
			s.add(FooModelObjectRequestTypeMapper.class);
			
			// Request type mappers: transforms XML->java for POST/PUT received parameters
			s.add(FooResponseTypeMapper.class);
			
			// Exception Mappers
			s.add(FooPersistenceErrorMapper.class);
			s.add(FooUncaughtExceptionMapper.class);
			
			return s;
		}
	}


