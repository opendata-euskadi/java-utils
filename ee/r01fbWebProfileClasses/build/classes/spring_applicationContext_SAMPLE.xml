<beans default-autowire="no"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.2.xsd
						http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
        					
	<!-- 
		Para utilizar variables en este fichero de spring que se tomen de un fichero externo
		(ver http://static.springsource.org/spring/docs/3.0.5.RELEASE/reference/beans.html#beans-factory-placeholderconfigurer) 
	-->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:r01e.backend.spring.properties"/>
	</bean>


<!-- ******************************************************************************************** -->
<!-- ****************************************  REST  ******************************************** -->
<!-- ******************************************************************************************** -->
<!-- Para cada uno de las entidades (bolsa de etiquetas, estructura, etiqueta) hay que 
	 repetir la configuración siguiente (cambiando ___ForX por ___ForStructureLabelsBag / ____ForStructure / ___ForStructureLabel -->
<!-- La estructura de la aplicación es:
  		R01ERESTResourceForXX
  			|__R01ERestCRUDDelegateForXX
  			|		|__R01EServicesCRUDForXX
  			|				|__R01EDBPersistenceForXX
  			|				|		|__JPA EntityManager
  			|				|__R01ELuceneIndexerFoxXX
  			|						|__R01ELuceneFieldsConfigSet
  			|						|__LuceneIndex
  			|__R01ERESTSearchDelegateForXX
  					|__R01EServicesSearchForXX
  							|__R01EDBSearcherForXX
  							|		|__JPA EntityManager
  							|__R01ELuceneSearcherForXX
  									|__R01ELuceneFieldsConfigSet
  									|__LuceneIndex
 -->


	<!-- **** CAPA DE RESOURCES REST *** -->
		<bean id="R01ERESTResourceForX" class="r01e.rest.R01ERESTResourceForX" lazy-init="true">
			<property name="crud" ref="R01ERESTCRUDDelegateForX"/>
			<property name="crud" ref="R01ERESTSearchDelegateX"/>
		</bean>
		<bean id="R01ERESTCRUDDelegateForX" class="r01e.rest.R01ERESTCRUDDelegateForX">
			<property name="services" ref="R01EServicesCRUDForX"/>
		</bean>
		<bean id="R01ERESTSearchDelegateX" class="r01e.rest.R01ERESTSearchDelegateX">
			<property name="services" ref="R01EServicesSearchForX"/>
		</bean>
	
	<!-- **** CAPA DE SERVICIOS *** -->
		<bean id="R01EServicesCRUDForX" class="r01e.services.R01EServicesCRUDForX">
			<property name="persistence" ref="R01EDBPersistenceForX"/>
			<property name="luceneIndexer" ref="R01ELuceneIndexerForX"/>
		</bean>
		<bean id="R01EServicesSearchForX" class="r01e.services.R01EServicesSearchForX">
			<property name="searcherDBBased" ref="R01EDBSearcherForX"/>
			<property name="searcherLuceneBased" ref="R01ELuceneSearcherForX"/>
		</bean>
		
	<!-- **** CAPA DE PERSISTENCIA EN BBDD *** -->
		<bean id="R01EDBPersistenceForX" class="r01e.persistence.R01EDBPersistenceForX">
			<!-- Aqui se inyecta el EntityManager JPA ya que tiene un miembro anotado con @PersistenceContext -->
		</bean>
		<bean id="R01EDBSearcherForX" class="r01e.persistence.R01EDBSearcherForX">
			<!-- Aqui se inyecta el EntityManager JPA ya que tiene un miembro anotado con @PersistenceContext -->
		</bean>

	<!-- **** CAPA DE PERSISTENCIA EN Lucene *** -->
		<bean id="R01ELuceneIndexerForX" class="r01e.lucene.R01ELuceneIndexerForX">
			<constructor-arg ref="R01ELuceneFieldsConfigSet"/>
			<property name="luceneIndex" ref="LuceneIndex"/>
		</bean>
		<bean id="R01ELuceneSearcherForX" class="r01e.lucene.R01ELuceneSearcherForX">
			<constructor-arg ref="R01ELuceneFieldsConfigSet"/>
			<property name="luceneIndex" ref="LuceneIndex"/>
		</bean>
	
<!-- ******************************************************************************************** -->
<!-- **************************************** Lucene ******************************************** -->
<!-- ******************************************************************************************** -->	
	<!-- **** FieldsConfig  ***** -->
		<bean id="R01ELuceneFieldsConfigSet" class="R01ELuceneFieldsConfigSet"
			  factory-bean="R01ELuceneFieldsConfigSetProvider"
 	      	  factory-method="get">
		</bean>
		<bean id="R01ELuceneFieldsConfigSetProvider"
 	           class="r01f.lucene.R01ELuceneGuiceModule$LuceneDirectoryProvider">
 		</bean>
	
	<!-- **** Index  ***** -->
		<!-- Singleton-holder del IndexWriter y el IndexSearcher -->
	 	<bean id="R01ELuceneIndex" class="r01f.lucene.LuceneIndex">
			<constructor-arg ref="R01ELuceneFileSystemDirectory"/>
			<constructor-arg ref="R01EAnalyzer"/>
	 	</bean>
	 	<!-- Analyzer especifico para R01E -->
	 	<bean id="R01EAnalyzer" class="r01e.lucene.R01ELuceneAnalyzer">
	 		<constructor-arg ref="R01ELuceneFieldsConfigSet"/>
	 	</bean>
	 	<!-- Lucene Directory basado de FileSystem -->
	 	<bean id="R01ELuceneFileSystemDirectory" class="org.apache.lucene.store.Directory"
	 	      factory-bean="R01ELuceneDirectoryProvider"
	 	      factory-method="provideFileSystemDirectory">
			<!-- en este caso como se trata de un provider constructor-arg es un parametro del metodo factoria -->
	 		<constructor-arg value="${lucene.directory.filesystem.path}"/>
	 	</bean>
	 	<bean id="R01ELuceneDirectoryProvider"
	 	      class="r01f.lucene.directory.LuceneDirectoryProvider">
	 	</bean>

<!-- ******************************************************************************************** -->
<!-- ************************************ 	 Entity Manager    ********************************** -->
<!-- ******************************************************************************************** -->
    <!-- Hacer que SPRING soporte la anotación @PersistenceContext para inyectar el EntityManager -->
    <bean id="JPAPersistenceAnnotationBeanPostProcessor" 
          class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor">
    </bean>
          
	<!-- ver http://www.baeldung.com/2011/12/13/the-persistence-layer-with-spring-3-1-and-jpa/ -->
	<bean id="JPAEntityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="persistenceUnit.r01e" />	<!-- ver META-INF/persistence.xml -->
		<property name="dataSource" ref="dataSource"/>							<!-- definido mas adelante -->
	    <property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter">
				<property name="showSql" value="${jpa.show_sql}"/>
		        <property name="generateDdl" value="${jpa.generateDdl}"/>
		        <property name="databasePlatform" value="${persistence.dialect}"/>
			</bean>
	    </property>
	    <!-- Activar load-time weaving de eclipselink -->
		<property name="loadTimeWeaver">
			<bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
		</property>
	</bean>
    <!-- Add Transaction support -->
	<bean id="JPATransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="JPAEntityManagerFactory"/>
	</bean>
    <!-- Use @Transaction annotations for managing transactions -->
    <!-- Si no incluye este bean, en Tomcat se hace un pesist pero NO comitea -->
    <tx:annotation-driven transaction-manager="JPATransactionManager" />

	<!-- DataSource en JNDI (Weblogic) -->
	<!-- 
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="${datasource.jndiName}"/>
	</bean>  
	-->
	<!-- DataSource para Tomcat -->
	<!-- IMPORTANTE!! Poner el jconector de mysql en $CATALINA_HOME/lib -->
	<!-- Ver info en http://www.mulesoft.com/tomcat-mysql sobre conexiones bbdd en Tomcat -->
	<!-- NOTA: Se podría configurar tambien en el fichero persistence.xml, pero se hace aqui
			   ya que de esta forma se pueden incluir variables dependientes del entorno
	-->
	<bean id="dataSource" 
		  class="org.apache.commons.dbcp.BasicDataSource" 
		  destroy-method="close">
		<property name="driverClassName" value="${datasource.driverClassName}" />
	    <property name="url" value="${datasource.url}" />
	    <property name="username" value="${datasource.user}" />
	    <property name="password" value="${datasource.pwd}" />
	    <property name="testOnBorrow" value="true" />
	    <property name="defaultAutoCommit" value="false" />
	    <property name="maxWait" value="5000" />
	</bean>

</beans>