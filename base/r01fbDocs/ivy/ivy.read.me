
Ivy is NOT a build tool -it's only a dependency management tool so configurations are NOT what scopes are for maven

Ivy uses a concept called CONFIGURATION: a module configuration is a way to USE or to see the module.

The DEPENDENCIES are mapped TO configurations: 
	For every DEPENDENCY the CONFIGURATION where the DEPENDENCY is USED must be specified:
		- Explicitly: 
				If the dependency com.org.fooModule is USED at the default module 
					<dependency org="com.org" name="fooModule" rev="latest.integration" conf="myConfig" /> 
				If the dependency com.org.fooModule is USED at ALL modules
					<dependency org="com.org" name="fooModule" rev="latest.integration" conf="*" />
		- Implicitly:
				A default CONFIGURATION where the DEPENDENCIES are USED if nothing is explicitly said:
				<dependencies defaultconf="myConfig">
					<dependency org="com.org" name="fooModule" rev="latest.integration"/>
					...
				</dependencies>
	
	Many times, there are a lot of UNNECESSARY DEPENDENCIES downloaded for a dependency
		For example, Hibernate downloads a bunch of JBoss JARs 
	... so many dependencies must be EXCLUDED
	
	To do so, Ivy uses again CONFIGURATIONS:
		For example, hibernate can be used with several cache implementations, several connection pool implementation, and so on...
		
		In order to USE ONLY the required dependencies of the hibernate DEPENDENCY the configuration should be done like:
		
			<dependency org="hibernate" name="hibernate" rev="2.1.8" conf="myConfig->proxool,oscache"/>
	 	
	 	which means:
	 		The hibernate dependency is USED at myConfig CONFIGURATION
	 		When retrieving hibernate dependency ONLY retrieve the proxool and oscache CONFIGURATIONS (this configurations belongs to hibernate Ivy config)
		so:
			<dependency org="com.org" name="fooModule" conf="myConfig->fooModuleConfig">    
		means "use com.org.fooModule dependency at myConfig CONFIGURATION and RETRIEVE only fooModuleConfig configured DEPENDENCIES of com.org.fooModule"
		
		and
			 <dependency org="com.org" name="fooModule" conf="myConfig->*">^
		means "use com.org.fooModule dependency at myConfig CONFIGURATION and RETRIEVE ALL configured DEPENDENCIES of com.org.fooModule"
		
	NOTE
		When a default CONFIGURATION is NOT specified:
				<dependencies>
					<dependency org="com.org" name="fooModule" rev="latest.integration"/>
					...
				</dependencies>
		the dependencies are USED in EVERY CONFIGURATION and ALL dependency configuration are retrieved
		... it's the same as put conf="*->*" in every dependency
				<dependencies>
					<dependency org="com.org" name="fooModule" rev="latest.integration" conf="*->*"/>
					...
				</dependencies>


Ivy & Maven
===========
Ivy's CONFIGURATIONS are similar to Maven SCOPES but with greather flexibility.
For libraries IMPORTED FROM Maven, Ivy will convert Maven's scopes into:

CONFIGURATION  DESCRIPTION                                                                      DEPENDS ON      TRANSITIVE
																						  			            DEPENDENCIES         EXAMPLE
=======================================================================================================================================================
	default 	It's a shortcut to runtime and master dependencies: include all                 runtime,master
				artifact's jars and it's runtime dependencies
	
	master 		contains only the artifact published by this module itself                                           NO          Project's jars itself
	
	compile 	Used if no configuration is specified. Used only at compile time                                                     commons-lang
	 
	provided	indicates that you expect the JDK or CONTAINER to prvide the dependency            compile           NO             Servlet APIs
	
	runtime 	the dependency is NOT required for compilation but it's required for execution                                   AOP runtime library
				It's NOT in the compile classpath!!!!
				
    test       the dependency is NOT required for normal use of the application and it's only      compile                              JUnit
               available for test compilation and execution phases
               
    system     it's imilar to provided except that you have to provide the jar which contains	   compile						   System classpath 
               the artifact explicitly that is alwais available and is NOT looked up in a											 provided jars
               repository
                
    sources   	Source artifact of the module
   
    javadoc   	javadoc artifact of the module
   
    optional  	optional dependencies		    
